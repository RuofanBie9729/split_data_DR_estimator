set.seed(123456)
#library(dplyr, warn.conflicts = FALSE)
#options(dplyr.summarise.inform = FALSE)
library(mice)
library(mvtnorm)
source("beta0_solver.R")
K=3 # number of trials
p=5 # number of covariates
rho=0.5 # covariance between covariates
N=3000 #total sample size
P <- rep(1,10) #trial assignment probability when X1>0
P <- P/sum(P)
marg=0.5
###coefficients for trial participation deciding model
beta_vec <- c(0.7, -0.7, 0.2, 0.7, -0.7, 0.2)
###coefficients for outcome generating model
theta1 <- c(1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.1)
theta0 <- c(1, -0.5, -0.5, -0.5, -0.5, -0.5, -0.1)
###coefficients for trial assignment
tau_coef <- c(log(1.3), log(1.3), log(1.3), log(1.3), log(1.3))
tau_coef <- rbind(tau_coef, c(log(0.8), log(0.8), log(0.8), log(0.8), log(0.8)))
tau_coef <- rbind(tau_coef, rep(0, 5))
###coefficients for missing data R=0
xi1_R_arm1 <- c(0.6, 0.3, 0.3, 0.3, 0.3)
xi1_R_arm0 <- c(0.6, 0.3, 0.3, 0.3, 0.3)
xi2_R_arm1 <- c(0.6, 0.4, 0.4, 0.4, 0.4)
xi2_R_arm0 <- c(0.6, 0.4, 0.4, 0.4, 0.4)
xi3_R_arm1 <- c(0.6, 0.5, 0.5, 0.5, 0.5)
xi3_R_arm0 <- c(0.6, 0.5, 0.5, 0.5, 0.5)
Sigma <- matrix(rho, 3, 3)
diag(Sigma) <- 1
Subjects <- rmvnorm(N, rep(0, 3), Sigma)
Subjects <- cbind(Subjects, matrix(rbinom(N*2, 1, 0.5), ncol=2))
external_dat <- cbind(rep(1, N), Subjects, (Subjects[,2])^2)
Intcpt <- determine_intercept(beta_vec=beta_vec,
marg=marg, lower_bound=-20, upper_bound=20,
external_dataset=as.data.frame(external_dat))
beta <- c(as.numeric(Intcpt[1]), beta_vec)
expit <- function(x){
if(exp(x)==Inf){
return(1)
}else if(exp(x)==-Inf){
return(-1)
}else{
return(exp(x)/(1+exp(x)))
}
}
paticipat_assign <- function(x){
n <- dim(x)[1]
x <- cbind(rep(1,n), x)
expR <- sapply(x%*%beta, expit)
random_num <- runif(n)
return(random_num<expR)
}
betaX <- cbind(Subjects, (Subjects[,2])^2)
paticipat_prob <- paticipat_assign(betaX)
TrialsData <- Subjects[which(paticipat_prob==1), ]
Target <- Subjects[which(paticipat_prob==0), ]
X <- cbind(rep(1, nrow(TrialsData)), TrialsData)
trial_assign <- function(x){
expTau <- apply(x%*%t(tau_coef), 1, exp)
prob <- apply(expTau, 2, function(x){x/sum(x)})
return(prob)
}
trial_prob <- trial_assign(TrialsData)
trial_onehot <- apply(trial_prob, 2, rmultinom, n=1, size=1)
trial <- apply(trial_onehot, 2, function(x)(which(x==1)))
#trial <- trial_assign(P, nrow(TrialsData))
TrialsData <- cbind(TrialsData, trial)
TrialsData <- TrialsData[order(TrialsData[,p+1]),]  ##should be changed to 10
### treatment assignment
Trt_assign <- sapply(table(trial), function(x){rbinom(x, 1, 0.5)}, simplify=F)
TrialsData <- cbind(TrialsData, unlist(Trt_assign))
Target <- cbind(Target, rbinom(nrow(Target), 1, 0.5))
X_Trl <- cbind(rep(1, nrow(TrialsData)), TrialsData[,1:p], (TrialsData[,2])^2)
Trial_Y1 <- X_Trl%*%theta1
Trial_Y0 <- X_Trl%*%theta0
Trial_Y <- unlist(Trt_assign)*Trial_Y1+(1-unlist(Trt_assign))*Trial_Y0
Y_gen <- function(Y){
n <- length(Y)
expY <- sapply(Y, expit)
random_num <- runif(n)
return(random_num<expY)
}
TrialsData <- cbind(TrialsData, Y_gen(Trial_Y))
X_Tgt <- cbind(rep(1, nrow(Target)), Target[,1:p], (Target[,2])^2)
Target_Y1 <- X_Tgt%*%theta1
Target_Y0 <- X_Tgt%*%theta0
Target_Y <- Target[,p+1]*Target_Y1+(1-Target[,p+1])*Target_Y0
Target <- cbind(Target, Y_gen(Target_Y))
TrialData <- as.data.frame(TrialsData)
colnames(TrialData) <- c("V1", "V2", "V3", "V4", "V5", "trial", "trt", "Y")
Target <- as.data.frame(Target)
colnames(Target) <- c("V1", "V2", "V3", "V4", "V5", "trt", "Y")
TrialMiss <- split(TrialData, TrialData$trial)
View(TrialMiss)
head(TrialMiss[[1]])
head(TrialMiss[[2]])
head(TrialMiss[[3]])
